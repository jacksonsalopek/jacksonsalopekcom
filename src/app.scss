/* Write your global styles here, in SCSS syntax. Variables and mixins from the src/variables.scss file are available here without importing */

html,
body {
	margin: 0;
	width: 100%;
	@include checkedBG(#333, 3px);
}
canvas {
	outline: none;
	border: none;
}

.js {
	&-navigation {
		text-align: center;
		background: #fff;
		padding: 8px 0;
		nav {
			margin-top: 8px;
			a {
				color: $primary-dark;
				font-family: $monospace;
				font-size: 12px;
				text-transform: lowercase;
				margin: 0 12px;

				&:first-of-type {
					margin-left: 0;
				}

				&:last-of-type {
					margin-right: 0;
				}
			}
		}
		.title-bar {
			flex: none;
			display: flex;
			align-items: center;
			height: 1.5rem;
			margin: $pad_sm 0;
			padding: $pad_sm calc($pad_sm / 2);
			$lines: 6;
			$p: calc(100% / 15);
			background: linear-gradient(#000 50%, transparent 50%);
			background-size: $p calc($p * 2);
			-webkit-background-clip: content-box;
			background-clip: content-box;

			.title {
				padding: 0 0.5em;
				margin: 0 auto;
				font-family: $monospace;
				font-size: $title-font-size;
				font-weight: bold;
				line-height: 1.1;
				text-align: center;
				background: #fff;
				cursor: default;

				a {
					color: $primary-dark;
					text-underline-offset: 2px;
				}
			}
			div {
				// painting larger and then scaling down avoids subpixel alignment issues with the linear-gradient at small sizes

				$scale: 0.5;
				$button_scaled_line_size: calc($ui_line_size * (1 / $scale));
				position: relative;
				display: block;
				width: calc(20px * (1 / $scale));
				height: calc(20px * (1 / $scale));
				margin: 0 $pad_sm;
				border: $button_scaled_line_size solid #000;
				outline: clamp($ui_line_size, $button_scaled_line_size, $ui_line_size * 3) solid #fff;
				background-color: #fff;
				cursor: pointer;
				transform: scale($scale);

				span {
					@include hidden();
				}

				&.close {
					&:before,
					&:after {
						content: '';
						position: absolute;
						width: 50px;
						height: 4px;
						background-color: #000;
						border-radius: 2px;
						top: 18px;
						box-shadow: 0 0 2px 0 #ccc;
					}

					&:before {
						-webkit-transform: rotate(45deg);
						-moz-transform: rotate(45deg);
						transform: rotate(45deg);
						left: -5px;
					}
					&:after {
						-webkit-transform: rotate(-45deg);
						-moz-transform: rotate(-45deg);
						transform: rotate(-45deg);
						right: -5px;
					}

					&:active {
						&::before,
						&::after {
							opacity: 1;
						}
					}
				}

				&.resize {
					$line: #000 0%, #000 100%;
					$w: 60%;
					$h: $button_scaled_line_size;

					background: linear-gradient($line) left ($w - 2%),
						linear-gradient(to bottom, $line) ($w - 2%) top;
					background-size: $w $h, $h $w;
					background-repeat: no-repeat;
					background-color: #fff;

					&:active {
						background: #fff;
					}
				}
			}
		}
	}
	&-animation-container {
		text-align: center;
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		z-index: -1;
		code {
			position: relative;
			top: calc(50vh - 14px);

			&.subtitle {
				top: 0;
			}
		}
	}
}

#js-three {
	@include checkedBG(#333, 3px);
	margin-top: 16px;
	height: calc(100% - 16px);
}
